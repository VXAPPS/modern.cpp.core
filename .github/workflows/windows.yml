name: windows

on: [push, pull_request]

jobs:

  Build:
    name: ${{matrix.name}} (${{matrix.config}})
    runs-on: ${{matrix.os}}

    env:
      CMAKE_GENERATOR: Ninja

    strategy:
      fail-fast: false
      matrix:
        name: [
          windows-2019-msvc2019,
          windows-2019-msvc2019-win32,
          windows-2019-msvc2019-arm64,
#          windows-2019-msvc2019-clang,
          windows-2022-msvc2022,
          windows-2022-msvc2022-win32,
          windows-2022-msvc2022-arm64
#          windows-2022-msvc2022-clang
        ]
        config: [Debug, Release]
        include:
          - name: windows-2019-msvc2019
            os: windows-2019
            compiler: cl
            version: Visual Studio 16 2019
            architecture: -A x64

          - name: windows-2019-msvc2019-win32
            os: windows-2019
            compiler: cl
            version: Visual Studio 16 2019
            architecture: -A Win32

          - name: windows-2019-msvc2019-arm64
            os: windows-2019
            compiler: cl
            version: Visual Studio 16 2019
            architecture: -A ARM64

#          - name: windows-2019-msvc2019-clang
#            os: windows-2019
#            compiler: clang-cl
#            version: Ninja
#            toolchain: '"-DCMAKE_C_COMPILER:FILEPATH=C:/Program Files/LLVM/bin/clang-cl.exe" "-DCMAKE_CXX_COMPILER:FILEPATH=C:/Program Files/LLVM/bin/clang-cl.exe"'

          - name: windows-2022-msvc2022
            os: windows-2022
            compiler: cl
            version: Visual Studio 17 2022
            architecture: -A x64

          - name: windows-2022-msvc2022-win32
            os: windows-2022
            compiler: cl
            version: Visual Studio 17 2022
            architecture: -A Win32

          - name: windows-2022-msvc2022-arm64
            os: windows-2022
            compiler: cl
            version: Visual Studio 17 2022
            architecture: -A ARM64

#          - name: windows-2022-msvc2022-clang
#            os: windows-2022
#            compiler: clang-cl
#            version: Ninja
#            toolchain: '"-DCMAKE_C_COMPILER:FILEPATH=C:/Program Files/LLVM/bin/clang-cl.exe" "-DCMAKE_CXX_COMPILER:FILEPATH=C:/Program Files/LLVM/bin/clang-cl.exe"'

    steps:
      - uses: actions/checkout@v3

      - name: Dependencies
        run: |
            choco install doxygen.install graphviz -y
            if ( "${{matrix.compiler}}" -eq "clang-cl" ) {
              choco install ninja -y
              choco install llvm -y
              echo "CC=C:/Program Files/LLVM/bin/${{matrix.compiler}}.exe" >> $Env:GITHUB_ENV
              echo "CXX=C:/Program Files/LLVM/bin/${{matrix.compiler}}.exe" >> $Env:GITHUB_ENV
            }

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'cpp'

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        working-directory: ${{runner.workspace}}/build
        run: cmake $Env:GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE:STRING=${{matrix.config}} -G"${{matrix.version}}" ${{matrix.architecture}} ${{matrix.toolchain}}

      - name: Build
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --config ${{matrix.config}}

      - name: Test
        if: matrix.architecture != '-A ARM64'
        working-directory: ${{runner.workspace}}/build
        run: ctest --output-on-failure -C ${{matrix.config}}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
