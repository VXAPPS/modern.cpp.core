name: integration

on: [push, pull_request]

jobs:

  Build:
    name: ${{matrix.name}} (${{matrix.config}})
    runs-on: ${{matrix.os}}

    strategy:
      fail-fast: false
      matrix:
        name: [
          ubuntu-18.04-gcc-9,
          ubuntu-20.04-gcc-9,
          ubuntu-20.04-gcc-10,
          ubuntu-20.04-clang-8,
          ubuntu-20.04-clang-9,
          ubuntu-20.04-clang-10,
          ubuntu-20.04-clang-11,
          windows-2019-cl,
          windows-2019-clang-cl,
          windows-2019-clang,
          windows-2019-gcc,
          macos-10.15-xcode-11,
          macos-10.15-xcode-11.4,
          macos-10.15-xcode-12,
          macos-11.0
        ]
        config: [Debug, Release]
        include:
          - name: ubuntu-18.04-gcc-9
            os: ubuntu-18.04
            compiler: gcc
            version: "9"

          - name: ubuntu-20.04-gcc-9
            os: ubuntu-20.04
            compiler: gcc
            version: "9"

          - name: ubuntu-20.04-gcc-10
            os: ubuntu-20.04
            compiler: gcc
            version: "10"

          - name: ubuntu-20.04-clang-8
            os: ubuntu-20.04
            compiler: clang
            version: "8"

          - name: ubuntu-20.04-clang-9
            os: ubuntu-20.04
            compiler: clang
            version: "9"

          - name: ubuntu-20.04-clang-10
            os: ubuntu-20.04
            compiler: clang
            version: "10"

          - name: ubuntu-20.04-clang-11
            os: ubuntu-20.04
            compiler: clang
            version: "11"

          - name: windows-2019-cl
            os: windows-2019
            compiler: cl
            version: "10"

          - name: windows-2019-clang-cl
            os: windows-2019
            compiler: clang-cl

          - name: windows-2019-clang
            os: windows-2019
            compiler: clang

          - name: windows-2019-gcc
            os: windows-2019
            compiler: gcc

          - name: macOS-10.15-xcode-11
            os: macOS-10.15
            compiler: xcode
            version: "11"

          - name: macOS-10.15-xcode-11.4
            os: macOS-10.15
            compiler: xcode
            version: "11.4"

          - name: macOS-10.15-xcode-12
            os: macOS-10.15
            compiler: xcode
            version: "12"

          - name: macos-11.0
            os: macos-11.0

    steps:
      - uses: actions/checkout@v2

      - name: Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
            wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -

            if [ "${{matrix.compiler}}" = "clang" ] && [ "${{matrix.version}}" = "11" ]; then
              sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main"
              sudo apt-get update
            fi

            if [ "${{matrix.compiler}}" = "gcc" ]; then
              sudo apt-get install -y g++-${{matrix.version}}
              echo "CC=gcc-${{matrix.version}}" >> $GITHUB_ENV
              echo "CXX=g++-${{matrix.version}}" >> $GITHUB_ENV
            else
              sudo apt-get install -y clang-${{matrix.version}}
              echo "CC=clang-${{matrix.version}}" >> $GITHUB_ENV
              echo "CXX=clang++-${{matrix.version}}" >> $GITHUB_ENV
            fi

      - name: Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
            if [ "${{matrix.compiler}}" = "gcc" ]; then
              brew install gcc@${{matrix.version}}
              echo "CC=gcc-${{matrix.version}}" >> $GITHUB_ENV
              echo "CXX=g++-${{matrix.version}}" >> $GITHUB_ENV
            fi
            if [ "${{matrix.compiler}}" = "xcode" ]; then
              ls -ls /Applications/
              sudo xcode-select -switch /Applications/Xcode_${{matrix.version}}.app
              echo "CC=clang" >> $GITHUB_ENV
              echo "CXX=clang++" >> $GITHUB_ENV
            fi

      - name: Dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
            Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
            scoop install ninja --global
            if ("${{matrix.compiler}}".StartsWith("clang")) {
              scoop install llvm --global
            }
            if ("${{matrix.compiler}}" -eq "gcc") {
              # Chocolatey GCC is broken on the windows-2019 image.
              # See: https://github.com/DaanDeMeyer/doctest/runs/231595515
              # See: https://github.community/t5/GitHub-Actions/Something-is-wrong-with-the-chocolatey-installed-version-of-gcc/td-p/32413
              scoop install gcc --global
              echo "CC=gcc" >> $GITHUB_ENV
              echo "CXX=g++" >> $GITHUB_ENV
            } elseif ("${{matrix.compiler}}" -eq "clang") {
              echo "CC=clang" >> $GITHUB_ENV
              echo "CXX=clang++" >> $GITHUB_ENV
            } else {
              echo "CC=${{matrix.compiler}}" >> $GITHUB_ENV
              echo "CXX=${{matrix.compiler}}" >> $GITHUB_ENV
            }
            # Scoop modifies the PATH so we make the modified PATH global.
            echo "PATH=$env:PATH" >> $GITHUB_ENV

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.config}}

      - name: Build
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --config ${{matrix.config}}

      - name: Test
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: ctest -C ${{matrix.config}}
